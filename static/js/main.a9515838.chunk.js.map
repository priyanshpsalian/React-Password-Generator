{"version":3,"sources":["App.js","message.js","Character.js","reportWebVitals.js","index.js"],"names":["App","useState","password","setPassword","passwordLength","setPasswordLength","includeUpperCase","setIncludeUpperCase","includeLowerCase","setIncludeLowerCase","includeNumbers","setIncludeNumbers","includeSymbols","setIncludeSymbols","createPassword","characterList","characterListLength","length","i","characterIndex","Math","round","random","charAt","notify","message","hasError","toast","error","position","autoClose","hideProgressBar","closeOnClick","pauseOnHover","draggable","progress","undefined","className","onClick","e","navigator","clipboard","writeText","copyToClipboard","htmlFor","defaultValue","onChange","target","value","type","id","name","max","min","checked","newestOnTop","rtl","pauseOnFocusLoss","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.a9515838.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport \"./App.css\"\nimport { numbers, upperCaseLetters, lowerCaseLetters, specialCharacters } from './Character'\nimport { toast, ToastContainer } from 'react-toastify'\nimport 'react-toastify/dist/ReactToastify.css';\nimport { COPY_Fail, COPY_SUCCESS } from './message';\n\nconst App = () => {\n  const [password, setPassword] = useState(\"\")\n  const [passwordLength, setPasswordLength] = useState(26)\n  const [includeUpperCase, setIncludeUpperCase] = useState(false)\n  const [includeLowerCase, setIncludeLowerCase] = useState(false)\n  const [includeNumbers, setIncludeNumbers] = useState(false)\n  const [includeSymbols, setIncludeSymbols] = useState(false)\n  const handleGeneratePassword = () => {\n    if (!includeUpperCase && !includeLowerCase && !includeNumbers && !includeSymbols) {\n      notify(\"To generate password you must select atleast one checkbox\", true)\n    }\n    else {\n      let characterList = \"\"\n      if (includeNumbers) {\n        characterList = characterList + numbers\n      }\n      if (includeUpperCase) {\n        characterList = characterList + upperCaseLetters\n      }\n      if (includeLowerCase) {\n        characterList = characterList + lowerCaseLetters\n      }\n      if (includeSymbols) {\n        characterList = characterList + specialCharacters\n      }\n      setPassword(createPassword(characterList))\n      notify(\"Password is generated successfully\", false)\n    }\n\n\n  }\n  const createPassword = (characterList) => {\n    let password = \"\"\n    const characterListLength = characterList.length\n    for (let i = 0; i < passwordLength; i++) {\n      const characterIndex = Math.round(Math.random() * characterListLength)\n      password = password + characterList.charAt(characterIndex)\n    }\n    return password\n  }\n  const copyToClipboard = (password) => {\n\n    navigator.clipboard.writeText(password)\n  }\n  const notify = (message, hasError = false) => {\n    if (hasError) {\n      toast.error(message, {\n        position: \"top-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n    else {\n      toast(message, {\n        position: \"top-center\",\n        autoClose: 5000,\n        hideProgressBar: false,\n        closeOnClick: true,\n        pauseOnHover: true,\n        draggable: true,\n        progress: undefined,\n      });\n    }\n\n  }\n  const handleCopyPassword = (e) => {\n    if (password === \"\") {\n      notify(COPY_Fail, true)\n    }\n    else {\n      copyToClipboard(password)\n      notify(COPY_SUCCESS)\n    }\n\n  }\n\n  return (\n    <div className=\"App\">\n      <div className=\"container\">\n        <div className=\"generator\">\n          <h2 className=\"generator__header\">\n           Password Generator\n          </h2>\n          <div className=\"generator__password\">\n            <h3 >{password}</h3>\n            <button className=\"copy__btn\">\n              <i onClick={handleCopyPassword} className=\"far fa-clipboard\"></i>\n            </button>\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"password-strength\">Password length</label>\n            <input className=\"pw\" defaultValue={passwordLength} onChange={(e) => setPasswordLength(e.target.value)} type=\"number\" id=\"password-stregth\" name=\"password-strength\" max=\"26\" min=\"8\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"uppercase-letters\">Add Uppercase Letters</label>\n            <input checked={includeUpperCase} onChange={(e) => setIncludeUpperCase(e.target.checked)} type=\"checkbox\" id=\"uppercase-letters\" name=\"uppercase-letters\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"lowercase-letters\">Add Lowercase Letters</label>\n            <input checked={includeLowerCase} onChange={(e) => setIncludeLowerCase(e.target.checked)} type=\"checkbox\" id=\"lowercase-letters\" name=\"lowercase-letters\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"include-numbers\">Include Numbers</label>\n            <input checked={includeNumbers} onChange={(e) => setIncludeNumbers(e.target.checked)} type=\"checkbox\" id=\"include-numbers\" name=\"include-numbers\" />\n          </div>\n          <div className=\"form-group\">\n            <label htmlFor=\"include-symbols\">Include Symbols</label>\n            <input checked={includeSymbols} onChange={(e) => setIncludeSymbols(e.target.checked)} type=\"checkbox\" id=\"include-symbols\" name=\"include-symbols\" />\n          </div>\n          <button onClick={handleGeneratePassword} className=\"generator__btn\">\n            Generate Password\n          </button>\n          <ToastContainer\n            position=\"top-center\"\n            autoClose={5000}\n            hideProgressBar={false}\n            newestOnTop={false}\n            closeOnClick\n            rtl={false}\n            pauseOnFocusLoss\n            draggable\n            pauseOnHover\n          />\n        </div>\n      </div>\n    </div>\n  )\n}\n\nexport default App\n","export const COPY_SUCCESS = \"Password successfully copied to clipboard\"\nexport const COPY_Fail = \"Password successfully copied to clipboard\"","export const numbers = '0123456789'\nexport const upperCaseLetters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\nexport const lowerCaseLetters ='abcdefghijklmnopqrstuvwxyz'\nexport const specialCharacters = \"!'^+%&/()=?_#$½§{[]}|;:>÷`<.*-@é\"","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}